// ------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本: 12.0.0.0
//  
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DLLTemp : DLLTempBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using NLog;\r\nusing NTCL.Model.Domain;\r\nusing System;\r\nusing System.Collections.Ge" +
                    "neric;\r\nusing System.Data.Entity;\r\nusing System.Data.SqlClient;\r\nusing System.Li" +
                    "nq;\r\nusing System.Text;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace ");
            
            #line 16 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 18 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(@"
    {
        #region Fields
        private static Logger logger = NLog.LogManager.GetCurrentClassLogger();
        private DateTime now = DateTime.Now;
        #endregion

        #region Property
        private List<object> param { get; set; }
        #endregion

        #region Constructor
        public ");
            
            #line 30 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            param = new List<object>();\r\n        }\r\n        #endre" +
                    "gion\r\n\r\n        #region Method\r\n        public bool Add(");
            
            #line 37 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n            using(");
            
            #line 39 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 39 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write("())\r\n            {\r\n                using(var dbContextTransaction = db.Database." +
                    "BeginTransaction())\r\n\t            {\r\n\t\t            try\r\n                    {\r\n " +
                    "                       #region TODO Add Table \r\n                        string c" +
                    "ontentId = Guid.NewGuid().ToString();\r\n                        param.Add(new Sql" +
                    "Parameter(\"@ContentID\", contentId));\r\n                        param.Add(new SqlP" +
                    "arameter(\"@ContentTypeID\", ContentTypeModel.CONTENT_TYPE_測試用));\r\n               " +
                    "         param.Add(new SqlParameter(\"@Name\", model.Name ?? (object)DBNull.Value)" +
                    ");\r\n                        param.Add(new SqlParameter(\"@Description\", model.Des" +
                    "cription ?? (object)DBNull.Value));\r\n                        param.Add(new SqlPa" +
                    "rameter(\"@IsPublish\", model.IsPublic));\r\n                        param.Add(new S" +
                    "qlParameter(\"@OpenTime\", model.OpenTime));\r\n                        param.Add(ne" +
                    "w SqlParameter(\"@CloseTime\", model.CloseTime));\r\n                        param.A" +
                    "dd(new SqlParameter(\"@Creator\", model.Updater ?? \"system\"));\r\n                  " +
                    "      param.Add(new SqlParameter(\"@Updater\", model.Updater ?? \"system\"));\r\n     " +
                    "                   db.Database.ExecuteSqlCommand(@\" \r\n                          " +
                    "  INSERT INTO Table(ID, ContentTypeID, Name, Description, IsPublish, OpenTime, C" +
                    "loseTime,  Creator, CreateTime, Updater, UpdateTime)\r\n                          " +
                    "  VALUES (@ContentID, @ContentTypeID, @Name, @Description, @IsPublish, @OpenTime" +
                    ", @CloseTime , @Creator, GETDATE(), @Updater, GETDATE());\",\r\n                   " +
                    "         param.ToArray());\r\n\r\n                        #endregion\r\n\r\n            " +
                    "            dbContextTransaction.Commit();\r\n                    }\r\n             " +
                    "       catch (Exception e)\r\n                    {\r\n                        logge" +
                    "r.Error(e);\r\n                        dbContextTransaction.Rollback();\r\n         " +
                    "               return false;\r\n                    }\r\n                    return " +
                    "true;\r\n                }\r\n\t        }\r\n        }\r\n\r\n        public bool Update(");
            
            #line 76 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n            using (");
            
            #line 78 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 78 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(@"())
            {
                using (var dbContextTransaction = db.Database.BeginTransaction())
                {
                    try
                    {
                        #region TODO Update Table 

                        param.Add(new SqlParameter(""@ID"", model.ContentID));
                        param.Add(new SqlParameter(""@Name"", model.Name));
                        param.Add(new SqlParameter(""@Updater"", model.Updater ?? ""system""));
                        db.Database.ExecuteSqlCommand(@"" 
                            UPDATE Table
                            SET Name = @Name,
					            Updater = @Updater, 
                                UpdateTime = GETDATE()
                            WHERE ID = @ID;"",
                            param.ToArray());

                        #endregion

                        dbContextTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        logger.Error(e);
                        dbContextTransaction.Rollback();
                        return false;
                    }
                }
                return true;
            }
        }

        public bool Delete(string id)
        {
            using(");
            
            #line 114 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 114 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write("())\r\n            {\r\n                using(var dbContextTransaction = db.Database." +
                    "BeginTransaction())\r\n\t            {\r\n\t\t            try\r\n                    {\r\n " +
                    "                       #region TODO Get ContentID\r\n                        param" +
                    ".Add(new SqlParameter(\"@ID\", id));\r\n                        string contentId = d" +
                    "b.Database.SqlQuery<string>(@\" \r\n                            select ContentID\r\n " +
                    "                           from Table\r\n                            where ID = @I" +
                    "D;\",\r\n                        param.ToArray()).Single();\r\n                      " +
                    "  #endregion\r\n\r\n                        #region TODO Drop all \r\n                " +
                    "        param.Clear();\r\n                        param.Add(new SqlParameter(\"@Con" +
                    "tentID\", contentId));\r\n                        param.Add(new SqlParameter(\"@ID\"," +
                    " id));\r\n                        db.Database.ExecuteSqlCommand(@\"\r\n              " +
                    "              DELETE Table WHERE ContentID = @ContentID;\r\n                      " +
                    "      DELETE Table WHERE ContentID = @ContentID;\r\n                            DE" +
                    "LETE Table WHERE ID = @ID;\r\n                            DELETE Table WHERE ID = " +
                    "@ContentID;\r\n                            \",\r\n                            param.T" +
                    "oArray());\r\n                        #endregion\r\n               \r\n               " +
                    "         dbContextTransaction.Commit();\r\n                    }\r\n                " +
                    "    catch (Exception e)\r\n                    {\r\n                        logger.E" +
                    "rror(e);\r\n                        dbContextTransaction.Rollback();\r\n            " +
                    "            return false;\r\n                    }\r\n                }\r\n\t        }\r" +
                    "\n            return true;\r\n        }\r\n\r\n        public List<");
            
            #line 155 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write("> GetAll()\r\n        {\r\n            List<");
            
            #line 157 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write("> colViewData = new List<");
            
            #line 157 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(">();\r\n            try\r\n            {\r\n                using (");
            
            #line 160 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 160 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(@"())
                {
                    #region 預設變數
                    StringBuilder sql = new StringBuilder();
                    #endregion

					#region TODO GetAll
                    sql.AppendFormat(@""
							SELECT
			                    *
		                    FROM Table
                            ORDER BY UpdateTime
	                    "");
                    colViewData = db.Database.SqlQuery<");
            
            #line 173 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(@">(sql.ToString(), param.ToArray()).ToList();
					#endregion
                }
            }
            catch (Exception e)
            {
                logger.Error(e);
                return null;
            }
            return colViewData;
        }

        public List<");
            
            #line 185 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write("> GetAll(PagenationModel model)\r\n        {\r\n            List<");
            
            #line 187 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write("> colViewData = new List<");
            
            #line 187 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(">();\r\n            try\r\n            {\r\n                using (");
            
            #line 190 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 190 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write("())\r\n                {\r\n                    #region 預設變數\r\n                    var" +
                    " min = 0;\r\n                    var max = 200000000;\r\n                    if (mod" +
                    "el != null)\r\n                    {\r\n                        min = (model.Page - " +
                    "1) * model.CntPerPage + 1;\r\n                        max = model.Page * model.Cnt" +
                    "PerPage;\r\n                        if (min >= max)\r\n                        {\r\n  " +
                    "                          min = 0;\r\n                            max = 20;\r\n     " +
                    "                   }\r\n                    }\r\n                    param.Add(new S" +
                    "qlParameter(\"@MIN\", min));\r\n                    param.Add(new SqlParameter(\"@MAX" +
                    "\", max));\r\n                    StringBuilder sql = new StringBuilder();\r\n       " +
                    "             #endregion\r\n                    \r\n                    #region TODO " +
                    "欄位排序用\r\n                    string[] colOrder = { \"cnt.UpdateTime\", \"cnt.Name\", \"" +
                    "c.Name\", \"cnt.OpenTime\", \"a.DisplayRatio\" };\r\n                    string orderTi" +
                    "tle = (model != null && (colOrder.Length > model.OrderNum)) ? colOrder[model.Ord" +
                    "erNum] : colOrder[0];\r\n                    string order = (model != null) ? (mod" +
                    "el.Order ? \"ASC\" : \"DESC\") : \"ASC\";\r\n                    #endregion//\r\n\r\n       " +
                    "             #region TODO 關鍵字篩選\r\n                    string condition = string.E" +
                    "mpty;\r\n                    List<string> lstWhere = new List<string>();\r\n\r\n      " +
                    "              //關鍵字搜尋\r\n                    if (model != null && !String.IsNullOr" +
                    "Empty(model.KeyWord))\r\n                    {   //檢索分類\r\n                        i" +
                    "f (model.QueryField == PagenationModel.測試用類別)\r\n                        {\r\n      " +
                    "                      lstWhere.Add(\" cnt.Name LIKE @KeyWord ESCAPE \'\\\\\' \");\r\n   " +
                    "                         param.Add(new SqlParameter(\"@KeyWord\", \"%\" + Regex.Repl" +
                    "ace(model.KeyWord, @\"([\\[\\]\\%\\\\_])\", @\"\\$1\") + \"%\"));\r\n                        }" +
                    "\r\n                        else if (model.QueryField == PagenationModel.測試用類別2)\r\n" +
                    "                        {\r\n                            lstWhere.Add(\" c.Name LIK" +
                    "E @KeyWord ESCAPE \'\\\\\' \");\r\n                            param.Add(new SqlParamet" +
                    "er(\"@KeyWord\", \"%\" + Regex.Replace(model.KeyWord, @\"([\\[\\]\\%\\\\_])\", @\"\\$1\") + \"%" +
                    "\"));\r\n                        }\r\n\r\n                    }\r\n\r\n                    " +
                    "if (lstWhere.Count > 0)\r\n                        condition = string.Format(\" WHE" +
                    "RE {0} \", string.Join(\" AND \", lstWhere.ToArray()));\r\n                    #endre" +
                    "gion\r\n\r\n\t\t\t\t\t#region TODO GetAll\r\n                    sql.AppendFormat(@\"\r\n\t    " +
                    "                select *\r\n\t                    from (\r\n\t\t                    SEL" +
                    "ECT *,\r\n\t\t\t                    ROW_NUMBER() OVER ( ORDER BY {0} {1} ) RN,\r\n     " +
                    "                           COUNT(*) OVER () TotalNum\r\n\t\t                    FROM" +
                    " Table \r\n                            {2}\r\n\t                    ) data\r\n         " +
                    "               WHERE RN BETWEEN @MIN AND @MAX ORDER BY RN\r\n\t                    " +
                    "\",\r\n                    orderTitle,\r\n                    order,\r\n               " +
                    "     condition);\r\n                    colViewData = db.Database.SqlQuery<");
            
            #line 255 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(@">(sql.ToString(), param.ToArray()).ToList();
					#endregion
                }
            }
            catch (Exception e)
            {
                logger.Error(e);
                return null;
            }
            return colViewData;
        }

        public ");
            
            #line 267 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(" GetById(string Id)\r\n        {\r\n            ");
            
            #line 269 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(" colViewData = new ");
            
            #line 269 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write("();\r\n            try\r\n            {\r\n                using (");
            
            #line 272 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write(" db = new ");
            
            #line 272 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DataAccessContext));
            
            #line default
            #line hidden
            this.Write("())\r\n                {\r\n\t\t\t\t\t#region TODO GetById\r\n                    colViewDat" +
                    "a = db.Database.SqlQuery<");
            
            #line 275 "C:\Users\OI\Documents\git\Git\T4_BackEnd\T4_sample\CodeGenerator\Template\DLLTemp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelName));
            
            #line default
            #line hidden
            this.Write(@">(@""
                        SELECT
			                *
		                FROM Table a 
                        WHERE a.ID = @ID""
                        , new SqlParameter(""@ID"", Id)).Single();
					#endregion
                }
            }
            catch (Exception e)
            {
                logger.Error(e);
                return null;
            }
            return colViewData;
        }

        #endregion

    }
}

");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class DLLTempBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
